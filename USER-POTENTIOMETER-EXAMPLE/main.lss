
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000006ca  0000075e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800084  00800084  00000782  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000016f  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091a  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031a  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000550  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_16>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	55 00       	.word	0x0055	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ea ec       	ldi	r30, 0xCA	; 202
  6a:	f6 e0       	ldi	r31, 0x06	; 6
  6c:	02 c0       	rjmp	.+4      	; 0x72 <.do_copy_data_start>

0000006e <.do_copy_data_loop>:
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0

00000072 <.do_copy_data_start>:
  72:	a4 38       	cpi	r26, 0x84	; 132
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <.do_copy_data_loop>

00000078 <__do_clear_bss>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a4 e8       	ldi	r26, 0x84	; 132
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a5 38       	cpi	r26, 0x85	; 133
  84:	b1 07       	cpc	r27, r17
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	c6 e5       	ldi	r28, 0x56	; 86
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <.do_global_ctors_start>

00000090 <.do_global_ctors_loop>:
  90:	22 97       	sbiw	r28, 0x02	; 2
  92:	fe 01       	movw	r30, r28
  94:	0e 94 1a 03 	call	0x634	; 0x634 <__tablejump__>

00000098 <.do_global_ctors_start>:
  98:	c4 35       	cpi	r28, 0x54	; 84
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <.do_global_ctors_loop>
  9e:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  a2:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_GLOBAL__I_lcd>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "LCD.hpp"
#include <stdlib.h>

LCD lcd;
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN3LCDC1Ev>


    while(1){

    }
  b2:	08 95       	ret

000000b4 <main>:
    lcd.send_string("ADC VALUE: ");
    lcd.send_string(adc_value);

}

int main(void){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	68 97       	sbiw	r28, 0x18	; 24
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61

    
    lcd.initialize();
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN3LCD10initializeEv>
    
    char line_1[] = "   USER POT";
  d0:	de 01       	movw	r26, r28
  d2:	11 96       	adiw	r26, 0x01	; 1
  d4:	e0 e6       	ldi	r30, 0x60	; 96
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x26>
    char line_2[] = "    EXAMPLE";
  e2:	de 01       	movw	r26, r28
  e4:	1d 96       	adiw	r26, 0x0d	; 13
  e6:	ec e6       	ldi	r30, 0x6C	; 108
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x38>
    lcd.clear();
  f4:	84 e8       	ldi	r24, 0x84	; 132
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN3LCD5clearEv>
    lcd.send_string(line_1);
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN3LCD11send_stringEPc>
    lcd.new_line();
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 01 03 	call	0x602	; 0x602 <_ZN3LCD8new_lineEv>
    lcd.send_string(line_2);
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	be 01       	movw	r22, r28
 118:	63 5f       	subi	r22, 0xF3	; 243
 11a:	7f 4f       	sbci	r23, 0xFF	; 255
 11c:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN3LCD11send_stringEPc>
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	97 e2       	ldi	r25, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 124:	29 e1       	ldi	r18, 0x19	; 25
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x74>
    _delay_ms(1000);

    //set voltage reference to AVCC
    ADMUX |= (1<<REFS0);
 132:	3e 9a       	sbi	0x07, 6	; 7
    ADMUX &= ~(1<<REFS1);
 134:	3f 98       	cbi	0x07, 7	; 7
    //left adjust the ADC result
    ADMUX |= (1<<ADLAR);
 136:	3d 9a       	sbi	0x07, 5	; 7
    //set a prescaler division factor of 16
    ADCSRA |= (1<<ADPS2);
 138:	32 9a       	sbi	0x06, 2	; 6
    //Enable ADC end of conversion interrupt
    ADCSRA |= (1<<ADIE);
 13a:	33 9a       	sbi	0x06, 3	; 6
    //Enable the ADC
    ADCSRA |= (1<<ADEN);
 13c:	37 9a       	sbi	0x06, 7	; 6
    //Start first ADC conversion
    ADCSRA |= (1<<ADSC);
 13e:	36 9a       	sbi	0x06, 6	; 6
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x8c>

00000142 <__vector_16>:
#include "LCD.hpp"
#include <stdlib.h>

LCD lcd;

ISR(ADC_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	00 d0       	rcall	.+0      	; 0x172 <__vector_16+0x30>
 172:	00 d0       	rcall	.+0      	; 0x174 <__vector_16+0x32>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    char adc_value[4];
    itoa(ADCL,adc_value,10);
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	7e 01       	movw	r14, r28
 17e:	08 94       	sec
 180:	e1 1c       	adc	r14, r1
 182:	f1 1c       	adc	r15, r1
 184:	b7 01       	movw	r22, r14
 186:	4a e0       	ldi	r20, 0x0A	; 10
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	0e 94 1e 03 	call	0x63c	; 0x63c <itoa>
    lcd.clear();
 18e:	04 e8       	ldi	r16, 0x84	; 132
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	c8 01       	movw	r24, r16
 194:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN3LCD5clearEv>
    lcd.send_string("ADC VALUE: ");
 198:	c8 01       	movw	r24, r16
 19a:	68 e7       	ldi	r22, 0x78	; 120
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN3LCD11send_stringEPc>
    lcd.send_string(adc_value);
 1a2:	c8 01       	movw	r24, r16
 1a4:	b7 01       	movw	r22, r14
 1a6:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN3LCD11send_stringEPc>

}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_ZN3LCDC2Ev>:
#include "LCD.hpp"

LCD::LCD(){}
 1e0:	08 95       	ret

000001e2 <_ZN3LCDC1Ev>:
 1e2:	08 95       	ret

000001e4 <_ZN3LCD22send_character_to_pinsEc>:

void LCD::send_character_to_pins(char character){
 1e4:	1f 93       	push	r17
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	28 97       	sbiw	r28, 0x08	; 8
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
    if((character & 0b00000001))  D0PORT |= (1<<D0PIN);
 1fa:	86 2f       	mov	r24, r22
 1fc:	60 ff       	sbrs	r22, 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <_ZN3LCD22send_character_to_pinsEc+0x20>
 200:	96 9a       	sbi	0x12, 6	; 18
 202:	01 c0       	rjmp	.+2      	; 0x206 <_ZN3LCD22send_character_to_pinsEc+0x22>
    else if(!(character & 0b00000001))  D0PORT &= ~(1<<D0PIN);
 204:	96 98       	cbi	0x12, 6	; 18

    if((character & 0b00000010))  D1PORT |= (1<<D1PIN);
 206:	81 ff       	sbrs	r24, 1
 208:	02 c0       	rjmp	.+4      	; 0x20e <_ZN3LCD22send_character_to_pinsEc+0x2a>
 20a:	97 9a       	sbi	0x12, 7	; 18
 20c:	01 c0       	rjmp	.+2      	; 0x210 <_ZN3LCD22send_character_to_pinsEc+0x2c>
    else if(!(character & 0b00000010))  D1PORT &= ~(1<<D1PIN);
 20e:	97 98       	cbi	0x12, 7	; 18

    if((character &  0b00000100))  D2PORT |= (1<<D2PIN);
 210:	82 ff       	sbrs	r24, 2
 212:	02 c0       	rjmp	.+4      	; 0x218 <_ZN3LCD22send_character_to_pinsEc+0x34>
 214:	aa 9a       	sbi	0x15, 2	; 21
 216:	01 c0       	rjmp	.+2      	; 0x21a <_ZN3LCD22send_character_to_pinsEc+0x36>
    else if(!(character &  0b00000100))  D2PORT &= ~(1<<D2PIN);
 218:	aa 98       	cbi	0x15, 2	; 21

    if((character &   0b00001000))  D3PORT |= (1<<D3PIN);
 21a:	83 ff       	sbrs	r24, 3
 21c:	02 c0       	rjmp	.+4      	; 0x222 <_ZN3LCD22send_character_to_pinsEc+0x3e>
 21e:	ab 9a       	sbi	0x15, 3	; 21
 220:	01 c0       	rjmp	.+2      	; 0x224 <_ZN3LCD22send_character_to_pinsEc+0x40>
    else if(!(character &   0b00001000))  D3PORT &= ~(1<<D3PIN);
 222:	ab 98       	cbi	0x15, 3	; 21

    if((character &   0b00010000))  D4PORT |= (1<<D4PIN);
 224:	84 ff       	sbrs	r24, 4
 226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN3LCD22send_character_to_pinsEc+0x48>
 228:	ac 9a       	sbi	0x15, 4	; 21
 22a:	01 c0       	rjmp	.+2      	; 0x22e <_ZN3LCD22send_character_to_pinsEc+0x4a>
    else if(!(character &   0b00010000))  D4PORT &= ~(1<<D4PIN); 
 22c:	ac 98       	cbi	0x15, 4	; 21

     if((character &   0b00100000))  D5PORT |= (1<<D5PIN);
 22e:	85 ff       	sbrs	r24, 5
 230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN3LCD22send_character_to_pinsEc+0x52>
 232:	ad 9a       	sbi	0x15, 5	; 21
 234:	01 c0       	rjmp	.+2      	; 0x238 <_ZN3LCD22send_character_to_pinsEc+0x54>
    else if(!(character &   0b00100000))  D5PORT &= ~(1<<D5PIN);
 236:	ad 98       	cbi	0x15, 5	; 21

     if((character &  0b01000000))  D6PORT |= (1<<D6PIN);
 238:	86 ff       	sbrs	r24, 6
 23a:	02 c0       	rjmp	.+4      	; 0x240 <_ZN3LCD22send_character_to_pinsEc+0x5c>
 23c:	ae 9a       	sbi	0x15, 6	; 21
 23e:	01 c0       	rjmp	.+2      	; 0x242 <_ZN3LCD22send_character_to_pinsEc+0x5e>
    else if(!(character &  0b01000000))  D6PORT &= ~(1<<D6PIN);
 240:	ae 98       	cbi	0x15, 6	; 21

     if((character &  0b10000000))  D7PORT |= (1<<D7PIN);
 242:	67 ff       	sbrs	r22, 7
 244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN3LCD22send_character_to_pinsEc+0x66>
 246:	af 9a       	sbi	0x15, 7	; 21
 248:	01 c0       	rjmp	.+2      	; 0x24c <_ZN3LCD22send_character_to_pinsEc+0x68>
    else if(!(character &  0b10000000))  D7PORT &= ~(1<<D7PIN);
 24a:	af 98       	cbi	0x15, 7	; 21

}

void LCD::delay(uint64_t duration){
    volatile uint64_t i ;
    for(i = 0 ; i<duration ; i++){}
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	1b 82       	std	Y+3, r1	; 0x03
 252:	1c 82       	std	Y+4, r1	; 0x04
 254:	1d 82       	std	Y+5, r1	; 0x05
 256:	1e 82       	std	Y+6, r1	; 0x06
 258:	1f 82       	std	Y+7, r1	; 0x07
 25a:	18 86       	std	Y+8, r1	; 0x08
 25c:	3b c0       	rjmp	.+118    	; 0x2d4 <_ZN3LCD22send_character_to_pinsEc+0xf0>
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	3b 81       	ldd	r19, Y+3	; 0x03
 264:	4c 81       	ldd	r20, Y+4	; 0x04
 266:	6d 81       	ldd	r22, Y+5	; 0x05
 268:	ee 81       	ldd	r30, Y+6	; 0x06
 26a:	af 81       	ldd	r26, Y+7	; 0x07
 26c:	18 85       	ldd	r17, Y+8	; 0x08
 26e:	b8 2f       	mov	r27, r24
 270:	bf 5f       	subi	r27, 0xFF	; 255
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	b8 17       	cp	r27, r24
 276:	08 f0       	brcs	.+2      	; 0x27a <_ZN3LCD22send_character_to_pinsEc+0x96>
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	f9 2f       	mov	r31, r25
 27c:	f2 0f       	add	r31, r18
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	f2 17       	cp	r31, r18
 282:	08 f0       	brcs	.+2      	; 0x286 <_ZN3LCD22send_character_to_pinsEc+0xa2>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	78 2f       	mov	r23, r24
 288:	73 0f       	add	r23, r19
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	73 17       	cp	r23, r19
 28e:	08 f0       	brcs	.+2      	; 0x292 <_ZN3LCD22send_character_to_pinsEc+0xae>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	58 2f       	mov	r21, r24
 294:	54 0f       	add	r21, r20
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	54 17       	cp	r21, r20
 29a:	08 f0       	brcs	.+2      	; 0x29e <_ZN3LCD22send_character_to_pinsEc+0xba>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	38 2f       	mov	r19, r24
 2a0:	36 0f       	add	r19, r22
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	36 17       	cp	r19, r22
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <_ZN3LCD22send_character_to_pinsEc+0xc6>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	28 2f       	mov	r18, r24
 2ac:	2e 0f       	add	r18, r30
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	2e 17       	cp	r18, r30
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <_ZN3LCD22send_character_to_pinsEc+0xd2>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	98 2f       	mov	r25, r24
 2b8:	9a 0f       	add	r25, r26
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	9a 17       	cp	r25, r26
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <_ZN3LCD22send_character_to_pinsEc+0xde>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	81 0f       	add	r24, r17
 2c4:	b9 83       	std	Y+1, r27	; 0x01
 2c6:	fa 83       	std	Y+2, r31	; 0x02
 2c8:	7b 83       	std	Y+3, r23	; 0x03
 2ca:	5c 83       	std	Y+4, r21	; 0x04
 2cc:	3d 83       	std	Y+5, r19	; 0x05
 2ce:	2e 83       	std	Y+6, r18	; 0x06
 2d0:	9f 83       	std	Y+7, r25	; 0x07
 2d2:	88 87       	std	Y+8, r24	; 0x08
 2d4:	79 81       	ldd	r23, Y+1	; 0x01
 2d6:	6a 81       	ldd	r22, Y+2	; 0x02
 2d8:	5b 81       	ldd	r21, Y+3	; 0x03
 2da:	4c 81       	ldd	r20, Y+4	; 0x04
 2dc:	3d 81       	ldd	r19, Y+5	; 0x05
 2de:	2e 81       	ldd	r18, Y+6	; 0x06
 2e0:	9f 81       	ldd	r25, Y+7	; 0x07
 2e2:	88 85       	ldd	r24, Y+8	; 0x08
 2e4:	88 23       	and	r24, r24
 2e6:	79 f4       	brne	.+30     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2e8:	99 23       	and	r25, r25
 2ea:	69 f4       	brne	.+26     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2ec:	22 23       	and	r18, r18
 2ee:	59 f4       	brne	.+22     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2f0:	33 23       	and	r19, r19
 2f2:	49 f4       	brne	.+18     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2f4:	44 23       	and	r20, r20
 2f6:	39 f4       	brne	.+14     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2f8:	55 23       	and	r21, r21
 2fa:	29 f4       	brne	.+10     	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 2fc:	66 23       	and	r22, r22
 2fe:	19 f4       	brne	.+6      	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 300:	74 36       	cpi	r23, 0x64	; 100
 302:	08 f4       	brcc	.+2      	; 0x306 <_ZN3LCD22send_character_to_pinsEc+0x122>
 304:	ac cf       	rjmp	.-168    	; 0x25e <_ZN3LCD22send_character_to_pinsEc+0x7a>
     if((character &  0b10000000))  D7PORT |= (1<<D7PIN);
    else if(!(character &  0b10000000))  D7PORT &= ~(1<<D7PIN);

     delay(DELAYBEFOREDISABLE);

     EnablePORT &= ~(1<<EnablePIN);
 306:	c2 98       	cbi	0x18, 2	; 24

}
 308:	28 96       	adiw	r28, 0x08	; 8
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	1f 91       	pop	r17
 31a:	08 95       	ret

0000031c <_ZN3LCD5delayEy>:

void LCD::delay(uint64_t duration){
 31c:	9f 92       	push	r9
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	28 97       	sbiw	r28, 0x08	; 8
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	90 2e       	mov	r9, r16
 344:	a1 2e       	mov	r10, r17
 346:	b2 2e       	mov	r11, r18
 348:	c3 2e       	mov	r12, r19
 34a:	d4 2e       	mov	r13, r20
 34c:	e5 2e       	mov	r14, r21
 34e:	f6 2e       	mov	r15, r22
 350:	07 2f       	mov	r16, r23
    volatile uint64_t i ;
    for(i = 0 ; i<duration ; i++){}
 352:	19 82       	std	Y+1, r1	; 0x01
 354:	1a 82       	std	Y+2, r1	; 0x02
 356:	1b 82       	std	Y+3, r1	; 0x03
 358:	1c 82       	std	Y+4, r1	; 0x04
 35a:	1d 82       	std	Y+5, r1	; 0x05
 35c:	1e 82       	std	Y+6, r1	; 0x06
 35e:	1f 82       	std	Y+7, r1	; 0x07
 360:	18 86       	std	Y+8, r1	; 0x08
 362:	3b c0       	rjmp	.+118    	; 0x3da <_ZN3LCD5delayEy+0xbe>
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	ea 81       	ldd	r30, Y+2	; 0x02
 368:	fb 81       	ldd	r31, Y+3	; 0x03
 36a:	ac 81       	ldd	r26, Y+4	; 0x04
 36c:	2d 81       	ldd	r18, Y+5	; 0x05
 36e:	4e 81       	ldd	r20, Y+6	; 0x06
 370:	6f 81       	ldd	r22, Y+7	; 0x07
 372:	18 85       	ldd	r17, Y+8	; 0x08
 374:	78 2f       	mov	r23, r24
 376:	7f 5f       	subi	r23, 0xFF	; 255
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	78 17       	cp	r23, r24
 37c:	08 f0       	brcs	.+2      	; 0x380 <_ZN3LCD5delayEy+0x64>
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	59 2f       	mov	r21, r25
 382:	5e 0f       	add	r21, r30
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	5e 17       	cp	r21, r30
 388:	08 f0       	brcs	.+2      	; 0x38c <_ZN3LCD5delayEy+0x70>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	38 2f       	mov	r19, r24
 38e:	3f 0f       	add	r19, r31
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	3f 17       	cp	r19, r31
 394:	08 f0       	brcs	.+2      	; 0x398 <_ZN3LCD5delayEy+0x7c>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	b8 2f       	mov	r27, r24
 39a:	ba 0f       	add	r27, r26
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	ba 17       	cp	r27, r26
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <_ZN3LCD5delayEy+0x88>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	f8 2f       	mov	r31, r24
 3a6:	f2 0f       	add	r31, r18
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	f2 17       	cp	r31, r18
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <_ZN3LCD5delayEy+0x94>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	e8 2f       	mov	r30, r24
 3b2:	e4 0f       	add	r30, r20
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	e4 17       	cp	r30, r20
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <_ZN3LCD5delayEy+0xa0>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	98 2f       	mov	r25, r24
 3be:	96 0f       	add	r25, r22
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	96 17       	cp	r25, r22
 3c4:	08 f0       	brcs	.+2      	; 0x3c8 <_ZN3LCD5delayEy+0xac>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	81 0f       	add	r24, r17
 3ca:	79 83       	std	Y+1, r23	; 0x01
 3cc:	5a 83       	std	Y+2, r21	; 0x02
 3ce:	3b 83       	std	Y+3, r19	; 0x03
 3d0:	bc 83       	std	Y+4, r27	; 0x04
 3d2:	fd 83       	std	Y+5, r31	; 0x05
 3d4:	ee 83       	std	Y+6, r30	; 0x06
 3d6:	9f 83       	std	Y+7, r25	; 0x07
 3d8:	88 87       	std	Y+8, r24	; 0x08
 3da:	39 81       	ldd	r19, Y+1	; 0x01
 3dc:	2a 81       	ldd	r18, Y+2	; 0x02
 3de:	bb 81       	ldd	r27, Y+3	; 0x03
 3e0:	ac 81       	ldd	r26, Y+4	; 0x04
 3e2:	fd 81       	ldd	r31, Y+5	; 0x05
 3e4:	ee 81       	ldd	r30, Y+6	; 0x06
 3e6:	9f 81       	ldd	r25, Y+7	; 0x07
 3e8:	88 85       	ldd	r24, Y+8	; 0x08
 3ea:	80 17       	cp	r24, r16
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <_ZN3LCD5delayEy+0xd4>
 3ee:	ba cf       	rjmp	.-140    	; 0x364 <_ZN3LCD5delayEy+0x48>
 3f0:	08 17       	cp	r16, r24
 3f2:	09 f5       	brne	.+66     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 3f4:	9f 15       	cp	r25, r15
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <_ZN3LCD5delayEy+0xde>
 3f8:	b5 cf       	rjmp	.-150    	; 0x364 <_ZN3LCD5delayEy+0x48>
 3fa:	f9 16       	cp	r15, r25
 3fc:	e1 f4       	brne	.+56     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 3fe:	ee 15       	cp	r30, r14
 400:	08 f4       	brcc	.+2      	; 0x404 <_ZN3LCD5delayEy+0xe8>
 402:	b0 cf       	rjmp	.-160    	; 0x364 <_ZN3LCD5delayEy+0x48>
 404:	ee 16       	cp	r14, r30
 406:	b9 f4       	brne	.+46     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 408:	fd 15       	cp	r31, r13
 40a:	08 f4       	brcc	.+2      	; 0x40e <_ZN3LCD5delayEy+0xf2>
 40c:	ab cf       	rjmp	.-170    	; 0x364 <_ZN3LCD5delayEy+0x48>
 40e:	df 16       	cp	r13, r31
 410:	91 f4       	brne	.+36     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 412:	ac 15       	cp	r26, r12
 414:	08 f4       	brcc	.+2      	; 0x418 <_ZN3LCD5delayEy+0xfc>
 416:	a6 cf       	rjmp	.-180    	; 0x364 <_ZN3LCD5delayEy+0x48>
 418:	ca 16       	cp	r12, r26
 41a:	69 f4       	brne	.+26     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 41c:	bb 15       	cp	r27, r11
 41e:	08 f4       	brcc	.+2      	; 0x422 <_ZN3LCD5delayEy+0x106>
 420:	a1 cf       	rjmp	.-190    	; 0x364 <_ZN3LCD5delayEy+0x48>
 422:	bb 16       	cp	r11, r27
 424:	41 f4       	brne	.+16     	; 0x436 <_ZN3LCD5delayEy+0x11a>
 426:	2a 15       	cp	r18, r10
 428:	08 f4       	brcc	.+2      	; 0x42c <_ZN3LCD5delayEy+0x110>
 42a:	9c cf       	rjmp	.-200    	; 0x364 <_ZN3LCD5delayEy+0x48>
 42c:	a2 16       	cp	r10, r18
 42e:	19 f4       	brne	.+6      	; 0x436 <_ZN3LCD5delayEy+0x11a>
 430:	39 15       	cp	r19, r9
 432:	08 f4       	brcc	.+2      	; 0x436 <_ZN3LCD5delayEy+0x11a>
 434:	97 cf       	rjmp	.-210    	; 0x364 <_ZN3LCD5delayEy+0x48>
}
 436:	28 96       	adiw	r28, 0x08	; 8
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	cf 91       	pop	r28
 444:	df 91       	pop	r29
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	9f 90       	pop	r9
 458:	08 95       	ret

0000045a <_ZN3LCD12command_modeEv>:
void LCD::command_mode(){
    RSPORT &= ~(1<<RSPIN);
 45a:	c0 98       	cbi	0x18, 0	; 24
}
 45c:	08 95       	ret

0000045e <_ZN3LCD14character_modeEv>:

void LCD::character_mode(){
    RSPORT |= (1<<RSPIN);
 45e:	c0 9a       	sbi	0x18, 0	; 24
}
 460:	08 95       	ret

00000462 <_ZN3LCD10write_modeEv>:
void LCD::write_mode(){
     RWPORT &= ~(1<<RWPIN);
 462:	c1 98       	cbi	0x18, 1	; 24
 }
 464:	08 95       	ret

00000466 <_ZN3LCD9read_modeEv>:
void LCD::read_mode(){
    RWPORT |= (1<<RWPIN);
 466:	c1 9a       	sbi	0x18, 1	; 24
}
 468:	08 95       	ret

0000046a <_ZN3LCD6EnableEv>:

void LCD::Enable(){
 46a:	1f 93       	push	r17
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	28 97       	sbiw	r28, 0x08	; 8
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	cd bf       	out	0x3d, r28	; 61

}

void LCD::delay(uint64_t duration){
    volatile uint64_t i ;
    for(i = 0 ; i<duration ; i++){}
 480:	19 82       	std	Y+1, r1	; 0x01
 482:	1a 82       	std	Y+2, r1	; 0x02
 484:	1b 82       	std	Y+3, r1	; 0x03
 486:	1c 82       	std	Y+4, r1	; 0x04
 488:	1d 82       	std	Y+5, r1	; 0x05
 48a:	1e 82       	std	Y+6, r1	; 0x06
 48c:	1f 82       	std	Y+7, r1	; 0x07
 48e:	18 86       	std	Y+8, r1	; 0x08
 490:	3b c0       	rjmp	.+118    	; 0x508 <_ZN3LCD6EnableEv+0x9e>
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	2a 81       	ldd	r18, Y+2	; 0x02
 496:	3b 81       	ldd	r19, Y+3	; 0x03
 498:	4c 81       	ldd	r20, Y+4	; 0x04
 49a:	6d 81       	ldd	r22, Y+5	; 0x05
 49c:	ee 81       	ldd	r30, Y+6	; 0x06
 49e:	af 81       	ldd	r26, Y+7	; 0x07
 4a0:	18 85       	ldd	r17, Y+8	; 0x08
 4a2:	b8 2f       	mov	r27, r24
 4a4:	bf 5f       	subi	r27, 0xFF	; 255
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	b8 17       	cp	r27, r24
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <_ZN3LCD6EnableEv+0x44>
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	f9 2f       	mov	r31, r25
 4b0:	f2 0f       	add	r31, r18
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	f2 17       	cp	r31, r18
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <_ZN3LCD6EnableEv+0x50>
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	78 2f       	mov	r23, r24
 4bc:	73 0f       	add	r23, r19
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	73 17       	cp	r23, r19
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <_ZN3LCD6EnableEv+0x5c>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	58 2f       	mov	r21, r24
 4c8:	54 0f       	add	r21, r20
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	54 17       	cp	r21, r20
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <_ZN3LCD6EnableEv+0x68>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	38 2f       	mov	r19, r24
 4d4:	36 0f       	add	r19, r22
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	36 17       	cp	r19, r22
 4da:	08 f0       	brcs	.+2      	; 0x4de <_ZN3LCD6EnableEv+0x74>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	28 2f       	mov	r18, r24
 4e0:	2e 0f       	add	r18, r30
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	2e 17       	cp	r18, r30
 4e6:	08 f0       	brcs	.+2      	; 0x4ea <_ZN3LCD6EnableEv+0x80>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	98 2f       	mov	r25, r24
 4ec:	9a 0f       	add	r25, r26
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	9a 17       	cp	r25, r26
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <_ZN3LCD6EnableEv+0x8c>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	81 0f       	add	r24, r17
 4f8:	b9 83       	std	Y+1, r27	; 0x01
 4fa:	fa 83       	std	Y+2, r31	; 0x02
 4fc:	7b 83       	std	Y+3, r23	; 0x03
 4fe:	5c 83       	std	Y+4, r21	; 0x04
 500:	3d 83       	std	Y+5, r19	; 0x05
 502:	2e 83       	std	Y+6, r18	; 0x06
 504:	9f 83       	std	Y+7, r25	; 0x07
 506:	88 87       	std	Y+8, r24	; 0x08
 508:	79 81       	ldd	r23, Y+1	; 0x01
 50a:	6a 81       	ldd	r22, Y+2	; 0x02
 50c:	5b 81       	ldd	r21, Y+3	; 0x03
 50e:	4c 81       	ldd	r20, Y+4	; 0x04
 510:	3d 81       	ldd	r19, Y+5	; 0x05
 512:	2e 81       	ldd	r18, Y+6	; 0x06
 514:	9f 81       	ldd	r25, Y+7	; 0x07
 516:	88 85       	ldd	r24, Y+8	; 0x08
 518:	88 23       	and	r24, r24
 51a:	79 f4       	brne	.+30     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 51c:	99 23       	and	r25, r25
 51e:	69 f4       	brne	.+26     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 520:	22 23       	and	r18, r18
 522:	59 f4       	brne	.+22     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 524:	33 23       	and	r19, r19
 526:	49 f4       	brne	.+18     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 528:	44 23       	and	r20, r20
 52a:	39 f4       	brne	.+14     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 52c:	55 23       	and	r21, r21
 52e:	29 f4       	brne	.+10     	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 530:	66 23       	and	r22, r22
 532:	19 f4       	brne	.+6      	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 534:	74 36       	cpi	r23, 0x64	; 100
 536:	08 f4       	brcc	.+2      	; 0x53a <_ZN3LCD6EnableEv+0xd0>
 538:	ac cf       	rjmp	.-168    	; 0x492 <_ZN3LCD6EnableEv+0x28>
    RWPORT |= (1<<RWPIN);
}

void LCD::Enable(){
    delay(DELAYBEFOREENABLE);
    EnablePORT |= (1<<EnablePIN);
 53a:	c2 9a       	sbi	0x18, 2	; 24
}
 53c:	28 96       	adiw	r28, 0x08	; 8
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	1f 91       	pop	r17
 54e:	08 95       	ret

00000550 <_ZN3LCD14send_characterEc>:

void LCD::send_character(char character){
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	8c 01       	movw	r16, r24
 558:	f6 2e       	mov	r15, r22

void LCD::character_mode(){
    RSPORT |= (1<<RSPIN);
}
void LCD::write_mode(){
     RWPORT &= ~(1<<RWPIN);
 55a:	c1 98       	cbi	0x18, 1	; 24
void LCD::command_mode(){
    RSPORT &= ~(1<<RSPIN);
}

void LCD::character_mode(){
    RSPORT |= (1<<RSPIN);
 55c:	c0 9a       	sbi	0x18, 0	; 24
}

void LCD::send_character(char character){
    write_mode();
    character_mode();
    Enable();
 55e:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN3LCD6EnableEv>
    send_character_to_pins(character);
 562:	c8 01       	movw	r24, r16
 564:	6f 2d       	mov	r22, r15
 566:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN3LCD22send_character_to_pinsEc>
}
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	08 95       	ret

00000572 <_ZN3LCD16send_instructionEc>:

void LCD::send_instruction(char instruction){
 572:	ff 92       	push	r15
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	8c 01       	movw	r16, r24
 57a:	f6 2e       	mov	r15, r22
void LCD::delay(uint64_t duration){
    volatile uint64_t i ;
    for(i = 0 ; i<duration ; i++){}
}
void LCD::command_mode(){
    RSPORT &= ~(1<<RSPIN);
 57c:	c0 98       	cbi	0x18, 0	; 24

void LCD::character_mode(){
    RSPORT |= (1<<RSPIN);
}
void LCD::write_mode(){
     RWPORT &= ~(1<<RWPIN);
 57e:	c1 98       	cbi	0x18, 1	; 24
}

void LCD::send_instruction(char instruction){
    command_mode();
    write_mode();
    Enable();
 580:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN3LCD6EnableEv>
    send_character_to_pins(instruction);
 584:	c8 01       	movw	r24, r16
 586:	6f 2d       	mov	r22, r15
 588:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN3LCD22send_character_to_pinsEc>
}
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	08 95       	ret

00000594 <_ZN3LCD10initializeEv>:
void LCD::initialize(){
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	8c 01       	movw	r16, r24
    DDIRECTION1 |= (1<<D0PIN); 
 59a:	8e 9a       	sbi	0x11, 6	; 17
    DDIRECTION1 |= (1<<D1PIN);
 59c:	8f 9a       	sbi	0x11, 7	; 17
    DDIRECTION |= (1<<D2PIN);
 59e:	a2 9a       	sbi	0x14, 2	; 20
    DDIRECTION |= (1<<D3PIN);
 5a0:	a3 9a       	sbi	0x14, 3	; 20
    DDIRECTION |= (1<<D4PIN);
 5a2:	a4 9a       	sbi	0x14, 4	; 20
    DDIRECTION |= (1<<D5PIN);
 5a4:	a5 9a       	sbi	0x14, 5	; 20
    DDIRECTION |= (1<<D6PIN);
 5a6:	a6 9a       	sbi	0x14, 6	; 20
    DDIRECTION |= (1<<D7PIN);
 5a8:	a7 9a       	sbi	0x14, 7	; 20
    SIGNALDIRECTION |= (1<<EnablePIN);
 5aa:	ba 9a       	sbi	0x17, 2	; 23
    SIGNALDIRECTION |= (1<<RSPIN);
 5ac:	b8 9a       	sbi	0x17, 0	; 23
    SIGNALDIRECTION |= (1<<RWPIN);
 5ae:	b9 9a       	sbi	0x17, 1	; 23

    D0PORT &= ~(1<<D0PIN);
 5b0:	96 98       	cbi	0x12, 6	; 18
    D1PORT &= ~(1<<D1PIN);
 5b2:	97 98       	cbi	0x12, 7	; 18
    D2PORT &= ~(1<<D2PIN);
 5b4:	aa 98       	cbi	0x15, 2	; 21
    D3PORT &= ~(1<<D3PIN);
 5b6:	ab 98       	cbi	0x15, 3	; 21
    D4PORT &= ~(1<<D4PIN);
 5b8:	ac 98       	cbi	0x15, 4	; 21
    D5PORT &= ~(1<<D5PIN);
 5ba:	ad 98       	cbi	0x15, 5	; 21
    D6PORT &= ~(1<<D6PIN);
 5bc:	ae 98       	cbi	0x15, 6	; 21
    D7PORT &= ~(1<<D7PIN);
 5be:	af 98       	cbi	0x15, 7	; 21
    EnablePORT &= ~(1<<EnablePIN);
 5c0:	c2 98       	cbi	0x18, 2	; 24
    RSPORT &= ~(1<<RSPIN);
 5c2:	c0 98       	cbi	0x18, 0	; 24
    RWPORT &= ~(1<<RWPIN);
 5c4:	c1 98       	cbi	0x18, 1	; 24

    
    send_instruction(0b00111000); //set to 8 bit mode
 5c6:	68 e3       	ldi	r22, 0x38	; 56
 5c8:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    send_instruction(0b00001110); //display on cursor blinking
 5cc:	c8 01       	movw	r24, r16
 5ce:	6e e0       	ldi	r22, 0x0E	; 14
 5d0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    send_instruction(0b00000110);  //increment cursor
 5d4:	c8 01       	movw	r24, r16
 5d6:	66 e0       	ldi	r22, 0x06	; 6
 5d8:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    send_instruction(0b10000000); //Force cursor to beginning ( 1st line)
 5dc:	c8 01       	movw	r24, r16
 5de:	60 e8       	ldi	r22, 0x80	; 128
 5e0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    send_instruction(0b00000001); //clear lcd
 5e4:	c8 01       	movw	r24, r16
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    send_instruction(0b00001100); //turn off cursor
 5ec:	c8 01       	movw	r24, r16
 5ee:	6c e0       	ldi	r22, 0x0C	; 12
 5f0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
    

}
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <_ZN3LCD5clearEv>:
void LCD::clear(){
	send_instruction(0b00000001);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
}
 600:	08 95       	ret

00000602 <_ZN3LCD8new_lineEv>:

void LCD::new_line(){
	send_instruction(0b11000000);
 602:	60 ec       	ldi	r22, 0xC0	; 192
 604:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN3LCD16send_instructionEc>
}
 608:	08 95       	ret

0000060a <_ZN3LCD11send_stringEPc>:
void LCD::send_string(char *byte){
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	8c 01       	movw	r16, r24
 614:	eb 01       	movw	r28, r22
 616:	04 c0       	rjmp	.+8      	; 0x620 <_ZN3LCD11send_stringEPc+0x16>
    for( ; *byte ; byte++) send_character(*byte);
 618:	c8 01       	movw	r24, r16
 61a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3LCD14send_characterEc>
 61e:	21 96       	adiw	r28, 0x01	; 1
 620:	68 81       	ld	r22, Y
 622:	66 23       	and	r22, r22
 624:	c9 f7       	brne	.-14     	; 0x618 <_ZN3LCD11send_stringEPc+0xe>
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <__tablejump2__>:
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31

00000634 <__tablejump__>:
 634:	05 90       	lpm	r0, Z+
 636:	f4 91       	lpm	r31, Z+
 638:	e0 2d       	mov	r30, r0
 63a:	09 94       	ijmp

0000063c <itoa>:
 63c:	fb 01       	movw	r30, r22
 63e:	9f 01       	movw	r18, r30
 640:	e8 94       	clt
 642:	42 30       	cpi	r20, 0x02	; 2
 644:	c4 f0       	brlt	.+48     	; 0x676 <itoa+0x3a>
 646:	45 32       	cpi	r20, 0x25	; 37
 648:	b4 f4       	brge	.+44     	; 0x676 <itoa+0x3a>
 64a:	4a 30       	cpi	r20, 0x0A	; 10
 64c:	29 f4       	brne	.+10     	; 0x658 <itoa+0x1c>
 64e:	97 fb       	bst	r25, 7
 650:	1e f4       	brtc	.+6      	; 0x658 <itoa+0x1c>
 652:	90 95       	com	r25
 654:	81 95       	neg	r24
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	64 2f       	mov	r22, r20
 65a:	77 27       	eor	r23, r23
 65c:	0e 94 4f 03 	call	0x69e	; 0x69e <__udivmodhi4>
 660:	80 5d       	subi	r24, 0xD0	; 208
 662:	8a 33       	cpi	r24, 0x3A	; 58
 664:	0c f0       	brlt	.+2      	; 0x668 <itoa+0x2c>
 666:	89 5d       	subi	r24, 0xD9	; 217
 668:	81 93       	st	Z+, r24
 66a:	cb 01       	movw	r24, r22
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	a1 f7       	brne	.-24     	; 0x658 <itoa+0x1c>
 670:	16 f4       	brtc	.+4      	; 0x676 <itoa+0x3a>
 672:	5d e2       	ldi	r21, 0x2D	; 45
 674:	51 93       	st	Z+, r21
 676:	10 82       	st	Z, r1
 678:	c9 01       	movw	r24, r18
 67a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <strrev>

0000067e <strrev>:
 67e:	dc 01       	movw	r26, r24
 680:	fc 01       	movw	r30, r24
 682:	67 2f       	mov	r22, r23
 684:	71 91       	ld	r23, Z+
 686:	77 23       	and	r23, r23
 688:	e1 f7       	brne	.-8      	; 0x682 <strrev+0x4>
 68a:	32 97       	sbiw	r30, 0x02	; 2
 68c:	04 c0       	rjmp	.+8      	; 0x696 <strrev+0x18>
 68e:	7c 91       	ld	r23, X
 690:	6d 93       	st	X+, r22
 692:	70 83       	st	Z, r23
 694:	62 91       	ld	r22, -Z
 696:	ae 17       	cp	r26, r30
 698:	bf 07       	cpc	r27, r31
 69a:	c8 f3       	brcs	.-14     	; 0x68e <strrev+0x10>
 69c:	08 95       	ret

0000069e <__udivmodhi4>:
 69e:	aa 1b       	sub	r26, r26
 6a0:	bb 1b       	sub	r27, r27
 6a2:	51 e1       	ldi	r21, 0x11	; 17
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <__udivmodhi4_ep>

000006a6 <__udivmodhi4_loop>:
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	a6 17       	cp	r26, r22
 6ac:	b7 07       	cpc	r27, r23
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <__udivmodhi4_ep>
 6b0:	a6 1b       	sub	r26, r22
 6b2:	b7 0b       	sbc	r27, r23

000006b4 <__udivmodhi4_ep>:
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	5a 95       	dec	r21
 6ba:	a9 f7       	brne	.-22     	; 0x6a6 <__udivmodhi4_loop>
 6bc:	80 95       	com	r24
 6be:	90 95       	com	r25
 6c0:	bc 01       	movw	r22, r24
 6c2:	cd 01       	movw	r24, r26
 6c4:	08 95       	ret

000006c6 <_exit>:
 6c6:	f8 94       	cli

000006c8 <__stop_program>:
 6c8:	ff cf       	rjmp	.-2      	; 0x6c8 <__stop_program>
